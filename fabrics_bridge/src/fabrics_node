#!/usr/bin/env python3
# general imports
import numpy as np

# fabrics imports
from fabrics.planner.fabricPlanner import DefaultFabricPlanner

# ros imports
import rospy
from std_msgs.msg import Float64MultiArray
from sensor_msgs.msg import JointState
from geometry_msgs.msg import Point


class FabricNode(object):
    def __init__(self):
        rospy.init_node('fabric_node')
        self._rate = rospy.Rate(100)
        self.set_parameters()
        self.set_action_publisher()
        self.set_goal_subscriber()
        self.set_joint_state_subscriber()
        self.set_planner()

    def set_planner(self):
        self._planner = DefaultFabricPlanner(self.n)
        self._planner.concretize()

    def set_parameters(self):
        self._n = 4

    def set_goal_subscriber(self):
        self._goal = np.zeros(3)
        self._goal_subscriber = rospy.Subscriber(
            '/planning_goal',
            Point, self.goal_callback
        )

    def goal_callback(self, goal_data: Point):
        self._goal = np.array([goal_data.x, goal_data.y, goal_data.z])

    def set_joint_state_subscriber(self):
        self._joint_positions = np.zeros(self.n)
        self._joint_velocities = np.zeros(self.n)
        self._joint_state_subscriber = rospy.Subscriber(
            '/joint_states',
            JointState, self.joint_states_callback
        )

    def joint_states_callback(self, joint_states_data: JointState):
        self._joint_positions = np.array(joint_states_data.position)
        self._joint_velocities = np.array(joint_states_data.velocity)

    def set_action_publisher(self):
        self._action_publisher = rospy.Publisher(
            '/joint_desired_accelerations', 
            Float64MultiArray, queue_size=10
        )
        self._action_message = Float64MultiArray(data=np.zeros(self.n))

    def compute_action(self):
        return self._planner.computeAction(self._joint_positions, self._joint_velocities)

    def publish_action(self, action: np.ndarray):
        self._action_message.data = action
        self._action_publisher.publish(self._action_message)

    def act(self):
        action = self.compute_action()
        self.publish_action(action)

    @property
    def n(self):
        return self._n

    def run(self):
        while not rospy.is_shutdown():
            self.act()
            self._rate.sleep()


if __name__ == "__main__":
    myFabricNode = FabricNode()
    try:
        myFabricNode.run()
    except rospy.ROSInterruptException:
        pass
