#!/usr/bin/env python3
# ros imports
import rospy
from fabrics_msgs.msg import FabricGoal
from fabrics_msgs.msg import FabricGoalArray
from visualization_msgs.msg import Marker, MarkerArray


class ClientNode(object):
    def __init__(self):
        rospy.init_node('client_node')
        self._rate = rospy.Rate(10)
        self.set_goals_publisher()
        self.set_goals_markers_publisher()

    def set_goals_publisher(self):
        self._goals_publisher = rospy.Publisher(
            '/planning_goals',
            FabricGoalArray, queue_size=10
        )
    def set_goals_markers_publisher(self):
        self._goals_markers_publisher = rospy.Publisher(
            '/planning_goals/markers',
            MarkerArray, queue_size=10
        )

    # TODO
    # def obstacles_publisher()
    # def publish_obstacles()

    # a function returns Marker() message type with some default settings,
    # i.e. [frame_id: panda_link0, color: green, shape: sphere]
    def init_goal_marker(self):
        goal_marker = Marker()
        goal_marker.header.frame_id = "panda_link0"
        goal_marker.type = goal_marker.SPHERE
        goal_marker.action = goal_marker.ADD
        goal_marker.color.a = 1.0
        goal_marker.color.r = 0.0
        goal_marker.color.g = 1.0
        goal_marker.color.b = 0.0
        return goal_marker

    def publish_goals(self):
        self._goals_data = FabricGoalArray()
        self._goal_data = FabricGoal()
        self._goal_data.position.x = 0.5
        self._goal_data.position.y = -0.4
        self._goal_data.position.z = 0.3
        self._goal_data.parent_link = 0
        self._goal_data.child_link = 7
        self._goal_data.prime = True
        self._goal_data.m = 3
        self._goal_data.w = 1
        self._goal_data.indices = [0, 1, 2]
        self._goal_data.type = "staticSubGoal"
        self._goal_data.epsilon = 0.05
        self._goals_list = []
        self._goals_list.append(self._goal_data)
        self._goals_data.goals = self._goals_list
        self._goals_publisher.publish(self._goals_data)

    def publish_goals_markers(self):
        self._goals_markers = MarkerArray()
        id_count = 0
        for goal in self._goals_list:
            id_count += 1
            goal_marker = self.init_goal_marker()
            goal_marker.id = id_count
            goal_marker.pose.position.x = goal.position.x
            goal_marker.pose.position.y = goal.position.y
            goal_marker.pose.position.z = goal.position.z
            goal_marker.pose.orientation.w = 1.0
            goal_marker.scale.x = goal.epsilon
            goal_marker.scale.y = goal.epsilon
            goal_marker.scale.z = goal.epsilon
            self._goals_markers.markers.append(goal_marker)
        self._goals_markers_publisher.publish(self._goals_markers)

    def run(self):
        while not rospy.is_shutdown():
            self.publish_goals()
            self.publish_goals_markers()
            self._rate.sleep()

if __name__ == "__main__":
    ClientNode = ClientNode()
    try:
        ClientNode.run()
    except rospy.ROSInterruptException:
        pass



